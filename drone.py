from djitellopy import Tello

class Drone: # Should this be a class..? I dunno


    def __init__( self ): # When an instance of this class is created...
        self.tello = Tello() # We instantiate an instance of the tello class...
        self.tello.connect() # Connect to that tello... (Ensure we're connected with Wi-Fi!)
        self.tello.streamon() # Turn on that tello's stream...

        self.vc = self.tello.get_video_capture() # Create an instance of that tello's video capture...

        self.on_forward_cam = True # And store the fact that we're on the forward cam in a variable.

    
    def to_forward_cam( self ): # Whenever we want to switch to the forwards-facing camera...
        if type( self.tello.cap ) != type( None ): # If we have a video capture object,
            self.tello.cap.release() # We release it...

        self.tello.send_command_with_return( "downvision 0" ) # And we tell the tello we want to see the frowards facing camera...

        self.tello.get_video_capture() # Before we tell it to remake its video capture object, this time with the forwards facing camera...
        
        self.on_forward_cam = True # And, finally, we change the variable representing what camera we're on appropriately.


    def to_downward_cam( self ): # Whenever we want to switch to the downwards-facing camera...
        if type( self.tello.cap ) != type( None ): # If we have a video capture object,
            self.tello.cap.release() # We release it...

        self.tello.send_command_with_return( "downvision 1" ) # And we tell the tello we want to see the downwards facing camera...

        self.tello.get_video_capture() # Before we tell it to remake its video capture object, this time with the forwards facing camera...

        self.on_forward_cam = False # And, finally, we change the variable representing what camera we're on appropriately.

    
    def get_forward_cam( self ): # Whenever we want to get the tello's forward-facing camera (footage?)...
        if self.on_forward_cam: # We check first to ensure we're on the forwards-facing camera...
            return self.tello.cap.read()[ 1 ] # Before returning the video capture object's read()[ 1 ] (the frame)

    
    def get_downward_cam( self ): # Whenever we want to get the tello's downward-facing camera (footage?)...
        if not self.on_forward_cam: # We check first to ensure we're not on the forwards-facing camera... (on the downwards-facing camera...)
            return self.tello.cap.read()[ 1 ] # Before returning the video capture object's read()[ 1 ] (the frame)


    def streamoff( self ): # Whenever the user wants to turn the tello's stream off...
        self.tello.streamoff() # They can use this method to more intuitively do so...